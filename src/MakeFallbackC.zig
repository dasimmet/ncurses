const std = @import("std");
const compat = @import("compat.zig");

pub fn main() !void {
    var gpa_impl = std.heap.GeneralPurposeAllocator(.{}).init;
    defer _ = gpa_impl.deinit();
    const gpa = gpa_impl.allocator();

    var arena_impl = std.heap.ArenaAllocator.init(gpa);
    defer arena_impl.deinit();
    const arena = arena_impl.allocator();
    _ = arena;

    const args = try std.process.argsAlloc(gpa);
    defer std.process.argsFree(gpa, args);

    std.debug.assert(args.len >= 2);
    const outpath = args[1];
    // const inpaths = args[2..];

    const outfile = try std.fs.cwd().createFile(outpath, .{});
    defer outfile.close();

    var outbuf: [4096]u8 = undefined;
    var output = outfile.writer(&outbuf);
    defer output.interface.flush() catch unreachable;
    const writer = &output.interface;

    try writer.print(
        \\/* This file was generated by {s} */
        \\
    , .{@src().file});

    // TODO: this actually needs to be conditional maybe?
    // original shell call:
    // $(tinfo)/MKfallback.sh $(TERMINFO) $(TERMINFO_SRC) "$(TIC_PATH)" "$(INFOCMP_PATH)" $(FALLBACK_LIST)
    try writer.writeAll(
        \\/*
        \\ * DO NOT EDIT THIS FILE BY HAND!
        \\*/
        \\
        \\#include <curses.priv.h>
        \\
        \\NCURSES_EXPORT(const TERMTYPE2 *)
        \\_nc_fallback2 (const char *name GCC_UNUSED)
        \\{
        \\    /* the fallback list is empty */
        \\    return((const TERMTYPE2 *)0);
        \\}
        \\
        \\#if NCURSES_EXT_NUMBERS
        \\#undef _nc_fallback
        \\
        \\/*
        \\ * This entrypoint is used by tack 1.07
        \\ */
        \\NCURSES_EXPORT(const TERMTYPE *)
        \\_nc_fallback (const char *name)
        \\{
        \\    const TERMTYPE2 *tp = _nc_fallback2(name);
        \\    const TERMTYPE *result = 0;
        \\    if (tp != 0) {
        \\    static TERMTYPE temp;
        \\    _nc_export_termtype2(&temp, tp);
        \\    result = &temp;
        \\    }
        \\    return result;
        \\}
        \\#endif
        \\
    );
}
