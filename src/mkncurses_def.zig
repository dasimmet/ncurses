const std = @import("std");

pub fn main() !void {
    var gpa_impl = std.heap.GeneralPurposeAllocator(.{}).init;
    defer _ = gpa_impl.deinit();
    const gpa = gpa_impl.allocator();

    const args = try std.process.argsAlloc(gpa);
    defer std.process.argsFree(gpa, args);

    std.debug.assert(args.len == 3);
    const inpath = args[1];
    const outpath = args[2];

    const infile = try std.fs.cwd().readFileAlloc(gpa, inpath, std.math.maxInt(usize));
    defer gpa.free(infile);

    const outfile = try std.fs.cwd().createFile(outpath, .{});
    defer outfile.close();

    var outbuf: [4096]u8 = undefined;
    var output = outfile.writer(&outbuf);
    defer output.interface.flush() catch unreachable;
    const writer = &output.interface;

    try writer.writeAll(
        \\/*
        \\ * This file is generated by mkncurses_def.zig
        \\*/
        \\
        \\#ifndef NC_DEFINE_H
        \\#define NC_DEFINE_H 1
        \\
    );
    var line_iter = std.mem.splitScalar(
        u8,
        infile,
        '\n',
    );
    while (line_iter.next()) |line| {
        if (line.len == 0) {
            try writer.writeAll("\n");
            continue;
        }
        if (std.mem.startsWith(u8, line, "#")) {
            try writer.writeAll("// ");
            try writer.writeAll(line);
            try writer.writeAll("\n");
            continue;
        }
        var field_iter = std.mem.tokenizeAny(
            u8,
            line,
            "\t ",
        );
        var key: []const u8 = "";
        var value: []const u8 = "0";
        var field_num: usize = 0;
        var offset: usize = 0;
        while (field_iter.next()) |field| : (field_num += 1) {
            switch (field_num) {
                0 => {
                    key = field;
                    offset += field.len;
                },
                1 => {
                    value = std.mem.trim(
                        u8,
                        line[field_iter.index..],
                        "\n\t\r ",
                    );
                    break;
                },
                else => unreachable,
            }
        }
        // std.log.debug("key:'{s}', value:'{s}'", .{key, value});
        try writer.writeAll("#ifndef ");
        try writer.writeAll(key);
        try writer.writeAll("\n#define ");
        try writer.writeAll(key);
        try writer.writeAll(" ");
        try writer.writeAll(value);
        try writer.writeAll("\n#endif\n\n");
    }

    try writer.writeAll(
        \\
        \\#endif /* NC_DEFINE_H */
        \\
        \\
    );
}
